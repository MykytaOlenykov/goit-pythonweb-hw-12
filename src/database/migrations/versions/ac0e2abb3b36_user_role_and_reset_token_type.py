"""user_role_and_reset_token_type

Revision ID: ac0e2abb3b36
Revises: 8037a248e249
Create Date: 2025-01-30 19:53:20.886730

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import ENUM


# revision identifiers, used by Alembic.
revision: str = "ac0e2abb3b36"
down_revision: Union[str, None] = "8037a248e249"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

token_type_enum = ENUM("ACCESS", "REFRESH", "VERIFICATION", "RESET", name="token_type")
user_role_enum = ENUM("USER", "ADMIN", name="user_role")


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    user_role_enum.create(op.get_bind(), checkfirst=True)
    op.add_column("users", sa.Column("role", user_role_enum, nullable=True))
    #  Update the token_type enum
    op.execute("ALTER TYPE token_type ADD VALUE 'RESET'")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "role")
    user_role_enum.drop(op.get_bind(), checkfirst=True)

    # Downgrade is tricky because ENUM values cannot be removed directly in PostgreSQL.
    # Instead, we create a new ENUM type without RESET, rename the old one, and replace it.
    op.execute(
        """
        CREATE TYPE token_type_old AS ENUM ('ACCESS', 'REFRESH', 'VERIFICATION');
        ALTER TABLE tokens ALTER COLUMN type TYPE token_type_old USING type::text::token_type_old;
        DROP TYPE token_type;
        ALTER TYPE token_type_old RENAME TO token_type;
    """
    )
    # ### end Alembic commands ###
